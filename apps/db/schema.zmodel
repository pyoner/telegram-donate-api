// This is a sample model to get you started.

/**
 * A sample data source using local sqlite db.
 */
datasource db {
    provider = 'sqlite'
    url = 'file:./dev.db'
}

generator client {
    provider = "prisma-client-js"
}

/**
 * Chrono model
 */
abstract model Chrono {
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([created_at], sort: 'desc')
    @@index([updated_at], sort: 'desc')
}

/**
 * SoftDelete
 */
abstract model SoftDelete {
    deleted_at DateTime?

    @@index([deleted_at(sort: Desc)])
}


/**
 * User model
 */
model User extends Chrono {
    id BigInt @id
    is_bot Boolean
    first_name String
    last_name String?
    username String?
    language_code String?
    is_premium Boolean?
    added_to_attachment_menu Boolean?
    can_join_groups Boolean?
    can_read_all_group_messages Boolean?
    supports_inline_queries Boolean?

    // rel
    channels Channel[]
    subscribers Subscriber[]
    tokens Token[]

    @@map('users')
}

/**
 * Channel model
 */
model Channel extends Chrono {
    id BigInt @id
    title String?         // Optional title for channels
    username String?         // Optional username for channels
    description String?         // Optional description for channels
    invite_link String?         // Optional primary invite link for channels
    linked_chat_id Int?            // Optional unique identifier for the linked chat/discussion group

    // rel
    owner_id Int
    owner User @relation(fields: [owner_id], references: [id])

    subscriptions Subscription[]


    @@map('channels')
}

/**
 * Subscription model
 **/
model Subscription extends Chrono, SoftDelete {
    id Int @id @default(autoincrement())
    title String
    description String
    command String?
    cover_url String?
    amount Int
    currency String
    period String
    invite_link String

    // rel
    channel_id Int
    channel Channel @relation(fields: [channel_id], references: [id])

    subscribers Subscriber[]

    @@map('subscriptions')
    @@unique([invite_link, deleted_at])
}

/**
 * Subscriber model
 */
model Subscriber extends Chrono, SoftDelete {
    id Int @id @default(autoincrement())
    
    // rel
    user_id Int
    user User @relation(fields: [user_id], references: [id])

    subscription_id Int
    subscription Subscription @relation(fields: [subscription_id], references: [id])

    @@map('subscribers')
    @@unique([user_id, subscription_id, deleted_at])
}

/**
 * Token model
 */
model Token extends Chrono {
    id Int @id @default(autoincrement())
    value String @default(cuid())
    name String?

    // rel
    owner_id BigInt
    owner User @relation(fields: [owner_id], references: [id])

    @@map('tokens')
    @@unique([owner_id, name])
}